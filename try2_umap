ids_mouse = pd.read_csv("/content/output_dir_mouse_h5/counts_unfiltered/cells_x_genes.genes.txt", header = None, sep = "\t")
adata_mouse.var['gene_ids'] = ids_mouse[0].values
genes_mouse = pd.read_csv("/content/output_dir_mouse_h5/counts_unfiltered/cells_x_genes.genes.names.txt", header = None, sep = "\t")
adata_mouse.var['gene'] = genes_mouse[0].values
adata_mouse.var["cell"] = "mouse"
adata_mouse.var_names_make_unique()

ids_human = pd.read_csv("/content/output_dir_human_h5/counts_unfiltered/cells_x_genes.genes.txt", header = None, sep = "\t")
adata_human.var['gene_ids'] = ids_human[0].values
genes_human = pd.read_csv("/content/output_dir_human_h5/counts_unfiltered/cells_x_genes.genes.names.txt", header = None, sep = "\t")
adata_human.var['gene'] = genes_human[0].values
adata_human.var["cell"] = "human"
adata_human.var_names_make_unique()


adata_mouse.var["mt"] = adata_mouse.var["gene"].index.str.startswith("MT-")
sc.pp.calculate_qc_metrics(
    adata_mouse,
    qc_vars=["mt"],
    percent_top=None,
    inplace=True,
    log1p=False,
)

adata_human.var["mt"] = adata_human.var["gene"].index.str.startswith("MT-")
sc.pp.calculate_qc_metrics(
    adata_human,
    qc_vars=["mt"],
    percent_top=None,
    inplace=True,
    log1p=False,
)


fig, axes = plt.subplots(ncols=3, figsize=(12, 4))

sns.histplot(adata_human.obs.total_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[0])
axes[0].set_ylabel("")
axes[0].set_xlabel("nUMIs")
axes[0].grid(alpha=0.3)

sns.histplot(adata_human.obs.n_genes_by_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[1])
axes[1].set_ylabel("")
axes[1].set_xlabel("nGenes")
axes[1].grid(alpha=0.3)

sns.histplot(adata_human.obs.pct_counts_mt, alpha=1, edgecolor="black", ax=axes[2])
axes[2].set_ylabel("")
axes[2].set_xlabel("% mt counts")
axes[2].grid(alpha=0.3)

fig.tight_layout()


fig, axes = plt.subplots(ncols=3, figsize=(12, 4))

sns.histplot(adata_mouse.obs.total_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[0])
axes[0].set_ylabel("")
axes[0].set_xlabel("nUMIs")
axes[0].grid(alpha=0.3)

sns.histplot(adata_mouse.obs.n_genes_by_counts, log_scale=True, alpha=1, bins=50, edgecolor="black", ax=axes[1])
axes[1].set_ylabel("")
axes[1].set_xlabel("nGenes")
axes[1].grid(alpha=0.3)

sns.histplot(adata_mouse.obs.pct_counts_mt, alpha=1, edgecolor="black", ax=axes[2])
axes[2].set_ylabel("")
axes[2].set_xlabel("% mt counts")
axes[2].grid(alpha=0.3)

fig.tight_layout()


adata53 = adata_mouse[adata_mouse.obs['pct_counts_mt'] < 5, :]
adata68 = adata_human[adata_human.obs['pct_counts_mt'] < 5, :]
sc.pp.filter_cells(adata_mouse, min_genes=30)
sc.pp.filter_genes(adata_mouse, min_cells=1)
sc.pp.filter_cells(adata_human, min_genes=30)
sc.pp.filter_genes(adata_human, min_cells=1)
sc.pp.normalize_total(adata_mouse, target_sum=1e4)
sc.pp.log1p(adata_mouse)
sc.pp.normalize_total(adata_human, target_sum=1e4)
sc.pp.log1p(adata_human)

sc.pp.neighbors(adata_mouse, n_neighbors=10, n_pcs=30)
sc.tl.umap(adata_mouse)
sc.tl.leiden(adata_mouse)
sc.pl.umap(adata_mouse, color = ['leiden'])

sc.pp.neighbors(adata_human, n_neighbors=10, n_pcs=30)
sc.tl.umap(adata_human)
sc.tl.leiden(adata_human)
sc.pl.umap(adata_human, color = ['leiden'])

adata_combined = anndata.concat([adata_mouse, adata_human], axis = 1)

def assign_cell_type(adata, var_column):
    adata.obs['cell_type'] = 'unknown'

    for cell in adata.obs.index:
        cell_genes = adata[cell, :].X.toarray().flatten()
        gene_labels = adata.var[var_column].values

        mouse_expression = np.sum(cell_genes[gene_labels == 'mouse'])
        human_expression = np.sum(cell_genes[gene_labels == 'human'])

        if mouse_expression > human_expression:#+ 200:
            adata.obs.at[cell, 'cell_type'] = 'mouse'
        elif mouse_expression <  human_expression:#- 200:
            adata.obs.at[cell, 'cell_type'] = 'human'
        else:
          adata.obs.at[cell, 'cell_type'] = 'unknown'

assign_cell_type(adata_combined, 'cell')


cell_counts = adata_combined.obs['cell_type'].value_counts()

plt.figure(figsize=(8, 6))
cell_counts.plot(kind='bar', color=['blue', 'red'])
plt.xlabel('Cell Type')
plt.ylabel('Number of Cells')
plt.title('Number of Mouse and Human Cells')
plt.xticks(rotation=0)
plt.show()

sc.pp.neighbors(adata_combined, n_neighbors=10, n_pcs=30)
sc.tl.umap(adata_combined)
sc.tl.leiden(adata_combined)
sc.pl.umap(adata_combined, color = ['leiden', "cell_type"])

sc.tl.rank_genes_groups(adata_combined, "cell_type", method = "wilcoxon")
sc.pl.rank_genes_groups(adata_combined, n_genes = 10)

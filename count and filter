adata_human = sc.read("/content/hs.h5ad")
adata_mouse = sc.read("/content/mm.h5ad")
genes_human = pd.read_csv("/content/hs_genes.txt", header = None, sep = "\t")
genes_mouse = pd.read_csv("/content/mm_genes.txt", header = None, sep = "\t")
adata_human.var_names = genes_human[0].values
adata_mouse.var_names = genes_mouse[0].values
adata_human.var_names_make_unique()
adata_mouse.var_names_make_unique()

n_genes_human = adata_human.X.getnnz(axis=1)
n_genes_mouse = adata_mouse.X.getnnz(axis=1)
n_genes_human_series = pd.Series(n_genes_human, index=adata_human.obs.index, name="n_genes_human")
n_genes_mouse_series = pd.Series(n_genes_mouse, index=adata_mouse.obs.index, name="n_genes_mouse")
merged_genes = pd.concat([n_genes_human_series, n_genes_mouse_series], axis=1)
adata_human.obs = adata_human.obs.join(merged_genes)
adata_human.obs['gene_proportion'] = adata_human.obs['n_genes_human'] / adata_human.obs['n_genes_mouse']


sc.pp.filter_cells(adata_human, min_genes=3000)
sc.pp.filter_genes(adata_human, min_cells=len(adata_human.obs) * 0.1)
sc.pp.normalize_total(adata_human, target_sum=1e4)
sc.pp.log1p(adata_human)
sc.pp.scale(adata_human)
cell_cycle_genes = [
    "MCM5", "PCNA", "TYMS", "FEN1", "MCM2", "MCM4", "RRM1", "UNG", "GINS2",
    "MCM6", "CDCA7", "DTL", "PRIM1", "UHRF1", "MLF1IP", "HELLS", "RFC2", "RPA2",
    "NASP", "RAD51AP1", "GMNN", "WDR76", "SLBP", "CCNE2", "UBR7", "POLD3", "MSH2",
    "ATAD2", "RAD51", "RRM2", "CDC45", "CDC6", "EXO1", "TIPIN", "DSCC1", "BLM",
    "CASP8AP2", "USP1", "CLSPN", "POLA1", "CHAF1B", "BRIP1", "E2F8", "HMGB2", "CDK1",
    "NUSAP1", "UBE2C", "BIRC5", "TPX2", "TOP2A", "NDC80", "CKS2", "NUF2", "CKS1B",
    "MKI67", "TMPO", "CENPF", "TACC3", "FAM64A", "SMC4", "CCNB2", "CKAP2L", "CKAP2",
    "AURKB", "BUB1", "KIF11", "ANP32E", "TUBB4B", "GTSE1", "KIF20B", "HJURP", "CDCA3",
    "HN1", "CDC20", "TTK", "CDC25C", "KIF2C", "RANGAP1", "NCAPD2", "DLGAP5", "CDCA2",
    "CDCA8", "ECT2", "KIF23", "HMMR", "AURKA", "PSRC1", "ANLN", "LBR", "CKAP5", "CENPE",
    "CTCF", "NEK2", "G2E3", "GAS2L3", "CBX5", "CENPA"
]
s_genes = cell_cycle_genes[:43]
g2m_genes = cell_cycle_genes[43:]
sc.tl.score_genes_cell_cycle(adata_human, s_genes=s_genes, g2m_genes=g2m_genes)
sc.pp.regress_out(adata_human, ['S_score', 'G2M_score'])
sc.pp.scale(adata_human)
sc.pp.highly_variable_genes(adata_human, min_mean=0.1, max_mean=10, min_disp=0.5)
print(f"Number of highly variable genes: {sum(adata_human.var['highly_variable'])}")




